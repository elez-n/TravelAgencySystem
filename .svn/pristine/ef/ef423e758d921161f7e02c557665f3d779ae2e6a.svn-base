package db;

import java.sql.Connection;
import java.util.List;
import java.util.Vector;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Node;


public class DbManipulation {

    public static List<DbManipulation> dbManipulations = new Vector<>();
    private dbConnection dbConnection = null;
    static Document document = null;

    static XPathExpression xPathExpression = null;
    static XPath xPath = null;

    public dbConnection getDbConnection() {
        return dbConnection;
    }

    private DbManipulation(String address, String port, String dbName, String user, String password) {
        dbConnection = new MSSQLjdbcConnection();
        dbConnection.GetConnection(address, port, dbName, user, password);
    }

    public static DbManipulation createConnection() {
        try {
            DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newDefaultInstance();
            DocumentBuilder builder = documentBuilderFactory.newDocumentBuilder();

            // Učitaj XML fajl sa konfiguracijom konekcije
            document = builder.parse("xml/xmlG4.xml");

            XPathFactory xPathFactory = XPathFactory.newInstance();
            xPath = xPathFactory.newXPath();

            // Uzmi prvi <connection> čvor
            Node connection = (Node) xPath.compile("/*/connection").evaluate(document, XPathConstants.NODE);

            String address = connection.getAttributes().getNamedItem("address").getNodeValue();
            String port = connection.getAttributes().getNamedItem("port").getNodeValue();
            String dbName = connection.getAttributes().getNamedItem("database").getNodeValue();
            String user = connection.getAttributes().getNamedItem("username").getNodeValue();
            String password = connection.getAttributes().getNamedItem("password").getNodeValue();

            if (!(dbManipulations.size() > 0)) {
                DbManipulation dbManipulation = new DbManipulation(address, port, dbName, user, password);
                dbManipulations.add(dbManipulation);
                return dbManipulation;
            } else {
                for (DbManipulation dbManipulation : dbManipulations) {
                    if (dbManipulation.dataExists(address, port, dbName, user, password)) {
                        if (dbManipulation.isConnectionValid(5)) {
                            return dbManipulation;
                        } else {
                            dbManipulation.closeConnection();
                            DbManipulation manipulation = new DbManipulation(address, port, dbName, user, password);
                            dbManipulations.add(manipulation);
                            return manipulation;
                        }
                    } else {
                        DbManipulation manipulation = new DbManipulation(address, port, dbName, user, password);
                        dbManipulations.add(manipulation);
                        return manipulation;
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    private boolean dataExists(String address, String port, String dbName, String user, String password) {
        return dbConnection.getAddress().equals(address)
                && dbConnection.getPort().equals(port)
                && dbConnection.getDbName().equals(dbName)
                && dbConnection.getUser().equals(user)
                && dbConnection.getPassword().equals(password);
    }

    private boolean isConnectionValid(int timeout) {
        if (dbConnection.isConnectionOpen()) {
            return dbConnection.isConnectionValid(timeout);
        }
        return false;
    }

    public void closeConnection() {
        int index = dbManipulations.indexOf(this);
        if (dbManipulations.size() > 0 && index != -1) {
            dbConnection = dbManipulations.get(index).getDbConnection();
        }
        if (dbConnection != null) {
            dbConnection.closeConnection();
            if (index != -1) {
                dbManipulations.remove(index);
            }
        }
    }

    public Connection getConnection() {
        if (dbConnection != null) {
            return dbConnection.getConn();
        }
        return null;
    }

    public String getDbName() {
        return dbConnection.getDbName();
    }
}