package db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 * Generički izvršavač skladištenih procedura nad trenutnom konekcijom.
 * Za SQL Server koristi EXEC sintaksu umesto JDBC { call ... } da bi se izbegla greška "Incorrect syntax near '{'".
 */
public class StoredProcedures {

    private final DbManipulation dbManipulation;

    public StoredProcedures(DbManipulation dbManipulation) {
        this.dbManipulation = dbManipulation;
    }

    private Connection getConnection() throws SQLException {
        Connection c = dbManipulation != null ? dbManipulation.getConnection() : null;
        if (c == null) throw new SQLException("No DB connection");
        return c;
    }

    private static String sanitizeProcedureName(String procedureName) {
        if (procedureName == null) return "";
        String trimmed = procedureName.trim();
        // Remove trailing semicolon
        if (trimmed.endsWith(";")) trimmed = trimmed.substring(0, trimmed.length() - 1).trim();
        // Strip everything after '('
        int paren = trimmed.indexOf('(');
        if (paren >= 0) {
            trimmed = trimmed.substring(0, paren).trim();
        }
        // Remove leading CALL/EXEC/EXECUTE if present
        String lower = trimmed.toLowerCase();
        if (lower.startsWith("call ")) {
            trimmed = trimmed.substring(5).trim();
        } else if (lower.startsWith("exec ")) {
            trimmed = trimmed.substring(5).trim();
        } else if (lower.startsWith("execute ")) {
            trimmed = trimmed.substring(8).trim();
        }
        return trimmed;
    }

    private static String buildExecSyntax(String procedureName, int paramCount) {
        String proc = sanitizeProcedureName(procedureName);
        StringBuilder builder = new StringBuilder();
        builder.append("EXEC ").append(proc);
        if (paramCount > 0) {
            builder.append(" ");
            for (int i = 0; i < paramCount; i++) {
                builder.append("?");
                if (i < paramCount - 1) builder.append(", ");
            }
        }
        return builder.toString();
    }

    public int executeUpdate(String procedureName, List<Object> params) throws SQLException {
        String sql = buildExecSyntax(procedureName, params != null ? params.size() : 0);
        System.out.println("EXECUTE UPDATE: " + sql + " | params=" + (params == null ? 0 : params.size()));
        try (PreparedStatement statement = getConnection().prepareStatement(sql)) {
            if (params != null) {
                for (int i = 0; i < params.size(); i++) {
                    statement.setObject(i + 1, params.get(i));
                }
            }
            return statement.executeUpdate();
        }
    }

    public java.sql.ResultSet executeRetrieve(String procedureName, List<Object> params) throws SQLException {
        String sql = buildExecSyntax(procedureName, params != null ? params.size() : 0);
        System.out.println("EXECUTE RETRIEVE: " + sql + " | params=" + (params == null ? 0 : params.size()));
        PreparedStatement statement = getConnection().prepareStatement(sql);
        if (params != null) {
            for (int i = 0; i < params.size(); i++) {
                statement.setObject(i + 1, params.get(i));
            }
        }
        return statement.executeQuery();
    }

    public List<List<Object>> readAll(String procedureName, List<Object> params, List<String> columnOrder) throws SQLException {
        String sql = buildExecSyntax(procedureName, params != null ? params.size() : 0);
        System.out.println("EXECUTE QUERY: " + sql + " | params=" + (params == null ? 0 : params.size()));
        try (PreparedStatement statement = getConnection().prepareStatement(sql)) {
            if (params != null) {
                for (int i = 0; i < params.size(); i++) {
                    statement.setObject(i + 1, params.get(i));
                }
            }

            boolean hasResultSet = statement.execute();
            ResultSet rs = null;
            while (true) {
                if (hasResultSet) {
                    rs = statement.getResultSet();
                    break;
                }
                int updateCount = statement.getUpdateCount();
                if (updateCount == -1) {
                    break;
                }
                hasResultSet = statement.getMoreResults();
            }

            List<List<Object>> rows = new ArrayList<>();
            if (rs != null) {
                System.out.println("ResultSet found, reading data...");
                try (ResultSet result = rs) {
                    while (result.next()) {
                        List<Object> row = new ArrayList<>();
                        if (columnOrder != null && !columnOrder.isEmpty()) {
                            System.out.println("Reading row with column order: " + columnOrder);
                            for (String col : columnOrder) {
                                try {
                                    Object value = result.getObject(col);
                                    System.out.println("Column " + col + " = " + value);
                                    row.add(value);
                                } catch (SQLException ex) {
                                    int idx;
                                    try {
                                        idx = result.findColumn(col);
                                        Object value = result.getObject(idx);
                                        System.out.println("Column " + col + " (by index " + idx + ") = " + value);
                                        row.add(value);
                                    } catch (SQLException e2) {
                                        System.out.println("Column " + col + " not found, setting null");
                                        row.add(null);
                                    }
                                }
                            }
                        } else {
                            int count = result.getMetaData().getColumnCount();
                            System.out.println("Reading row with " + count + " columns by index");
                            for (int i = 1; i <= count; i++) {
                                Object value = result.getObject(i);
                                System.out.println("Column " + i + " = " + value);
                                row.add(value);
                            }
                        }
                        rows.add(row);
                        System.out.println("Row added: " + row);
                    }
                }
                System.out.println("Total rows read: " + rows.size());
            } else {
                System.out.println("No ResultSet found!");
            }
            return rows;
        }
    }
}


